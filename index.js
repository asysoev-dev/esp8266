require('dotenv').config()
const httpServer = require("http").createServer();
const io = require("socket.io")(httpServer, {});
const TelegramApi = require("node-telegram-bot-api");
const token = process.env.API_KEY;
const pinCode = process.env.PIN_CODE;
const bot = new TelegramApi(token, {polling: true});
const fs = require('fs');
let isSendWarningTemperatureMessage = false;
let isSendWarningOpenGateMessage = false;
let currentSensorsData = null;
let activeUsersId = [];
let remindTemperatureSetTimeoutId = null;
let remindOpenGateSetTimeoutId = null;
let isSendDisconnectMessage = false;
let disconnectTimeoutId = null;
let isRestartModule = false;
let bufferPinCode = {};
let calculatorKeyboard = JSON.stringify({
    inline_keyboard: [
        [{text: `1`, callback_data: "pin-1"}, {text: `2`, callback_data: "pin-2"}, {text: `3`, callback_data: "pin-3"}],
        [{text: `4`, callback_data: "pin-4"}, {text: `5`, callback_data: "pin-5"}, {text: `6`, callback_data: "pin-6"}],
        [{text: `7`, callback_data: "pin-7"}, {text: `8`, callback_data: "pin-8"}, {text: `9`, callback_data: "pin-9"}],
        [{text: `*`, callback_data: "pin-*"}, {text: `0`, callback_data: "pin-0"}, {text: `#`, callback_data: "pin-#"}],
        [{text: `–°–±—Ä–æ—Å`, callback_data: "reset"}]
    ],
});

bot.setMyCommands([
    {command: "/start", description: "–í–æ–π—Ç–∏"},
    {command: "/close", description: "–í—ã–π—Ç–∏"},
    {command: "/service", description: "–°–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"}
]);
bot.on('text', async msg => {
    // console.log(msg);
})

bot.on('callback_query', function onCallbackQuery(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    if (callbackQuery.data === "remindTemperature30") {
        clearTimeout(remindTemperatureSetTimeoutId);
        createTemperatureReminder(1800000);
    }
    if (callbackQuery.data === "remindTemperature60") {
        clearTimeout(remindTemperatureSetTimeoutId);
        createTemperatureReminder(3600000);
    }
    if (callbackQuery.data === "clearTemperatureTimer") {
        clearTimeout(remindTemperatureSetTimeoutId);
        createTemperatureReminder(60000);
    }

    if (callbackQuery.data === "remindOpenGate5") {
        clearTimeout(remindOpenGateSetTimeoutId);
        createOpenGateReminder(300000);
    }
    if (callbackQuery.data === "remindOpenGate15") {
        clearTimeout(remindOpenGateSetTimeoutId);
        createOpenGateReminder(900000);
    }
    if (callbackQuery.data === "remindOpenGate30") {
        clearTimeout(remindOpenGateSetTimeoutId);
        createOpenGateReminder(1800000);
    }
    if (callbackQuery.data === "remindOpenGate60") {
        clearTimeout(remindOpenGateSetTimeoutId);
        createOpenGateReminder(3600000);
    }
    if (callbackQuery.data === "clearOpenGateTimer") {
        clearTimeout(remindOpenGateSetTimeoutId);
        createOpenGateReminder(60000);
    }

    if (callbackQuery.data === "openDoor") {
        socketIo.emit('relay_three');
    }
    if (callbackQuery.data === "skipCall") {
        bot.sendSticker(chatId, "CAACAgIAAxkBAAIG9GcpVhedhI5bd6Co2xLkrg6835vgAAItPQACiHVJSZGPS5PWIKflNgQ");
    }
    if (callbackQuery.data.includes("pin")) {
        bufferPinCode[chatId] += callbackQuery.data.split("-")[1];
        console.log('%cbufferPinCode: ', 'color: green;', bufferPinCode);
        if (bufferPinCode[chatId] === pinCode) {
            bufferPinCode[chatId] = "";
            if (!activeUsersId.includes(chatId)) {
                activeUsersId.push(chatId);
                writeActiveUsersIdToDbFile(chatId);
            } else {
                bot.sendMessage(chatId, `${callbackQuery.from.first_name}, —Ç—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
                return;
            }
            bot.sendSticker(chatId, "CAACAgIAAxkBAAIGxGcpUUOOzM1rBIcB8UZY0fY31DcqAALnNQACtoxBS2JmFwWrYLwGNgQ").then(() => {
                bot.sendMessage(chatId, "–û—Ç–ª–∏—á–Ω–æ! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!", {
                    reply_markup: {
                        keyboard: [
                            ['üìà –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è'],
                            ['–°–≤–µ—Ç'],
                            ['–í–æ—Ä–æ—Ç–∞'],
                            ['–ö–∞–ª–∏—Ç–∫–∞'],
                        ],
                        resize_keyboard: true
                    }
                });
            });
        }
    }
    if (callbackQuery.data === "reset") {
        bufferPinCode[chatId] = "";
    }
});
bot.on("message", async msg => {
    // console.log('%cmsg: ', 'color: green;', msg);
    const text = msg.text;
    const chatId = msg.chat.id;
    if (text === "/start") {
        if (!activeUsersId.includes(chatId)) {
            bot.sendSticker(chatId, "CAACAgIAAxkBAAIG12cpU3cTRTOfwp2aj-obCpUT1uWOAAIxNAAC6BugStKvp8RmJqK8NgQ").then(() => {
                bufferPinCode[chatId] = "";
                bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç ${msg.from.first_name}, –≤–≤–µ–¥–∏ PIN –∫–æ–¥`, {
                    parse_mode: "MarkdownV2",
                    reply_markup: calculatorKeyboard
                });
            });
            return;
        }
        bot.sendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!");
    }
    if (text === "üìà –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è") {
        if (currentSensorsData === null) {
            bot.sendSticker(chatId, 'CAACAgIAAxkBAAIGzGcpUvM89T8Qg5AwGhqWZ3Onaf9dAALzQQACb7NoSV-j4NDXxKN2NgQ').then(() => {
                bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤");
            })
            return;
        }
        // bot.sendMessage(chatId, "–í–≤–µ–¥–∏ PIN –∫–æ–¥", {
        //     reply_markup: calculatorKeyboard
        // });
        bot.sendMessage(chatId, `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${Math.floor(currentSensorsData?.temperature)}C¬∞ üå°\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${Math.min(Math.floor(currentSensorsData?.humidity), 100)}% üíß`);
    }
    if (text === "–°–≤–µ—Ç") {
        socketIo.emit('relay_one');
    }
    if (text === "–í–æ—Ä–æ—Ç–∞") {
        socketIo.emit('relay_two');
    }
    if (text === "–ö–∞–ª–∏—Ç–∫–∞") {
        socketIo.emit('relay_three');
    }
    if (text === "/state") {
        socketIo.emit('show_state');
    }
    if (text === "/restartMod") {
        isRestartModule = true;
        socketIo.emit('restart_module');
    }
    if (text === "/apMode") {
        socketIo.emit('start_ap_mode');
    }
    if (text === "/service") {
        bot.sendMessage(chatId, `–°–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/restartMod \\- –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è,\n/apMode \\- –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–¥—É–ª—å –≤ —Ä–µ–∂–∏–º —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞,\n/state \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤`, {
            parse_mode: "MarkdownV2"
        });
    }
    if (text === "/close") {
        if (activeUsersId.includes(chatId)) {
            const userIndex = activeUsersId.indexOf(chatId);
            activeUsersId.splice(userIndex, 1);
            rewriteActiveUsersIdToDbFile(activeUsersId);

            bot.sendSticker(chatId, "CAACAgIAAxkBAAIG4WcpVDXaMVArMMhs0zPGDxoGLktuAAKmQwACW8MoSgAB0uw6E9P-YzYE").then(() => {
                bot.sendMessage(chatId, `–ü–æ–∫–∞ ${msg.from.first_name}\n–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π, –Ω–∞–∂–º–∏ –í–æ–π—Ç–∏ –∏–ª–∏ –Ω–∞–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É */start*`, {
                    reply_markup: {
                        remove_keyboard: true
                    },
                    parse_mode: "MarkdownV2"
                });
            });

        }
    }
});

const socketIo = io.on("connection", (socket) => {
    if (!isSendDisconnectMessage && !isRestartModule) { //–Ω–µ –±—ã–ª–æ disconnect(–∞) –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        activeUsersId.forEach((userId) => {
            bot.sendSticker(userId, "CAACAgIAAxkBAAIG7WcpVM7PlckHAVSETRPH3-NtOwQlAAISNQACx6ehSqkeK7OWc836NgQ").then(() => {
                bot.sendMessage(userId, "–°–≤—è–∑—å —Å –º–æ–¥—É–ª–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!!!!!! ))))");
            });
        });
    } else {
        isSendDisconnectMessage = false;
        clearTimeout(disconnectTimeoutId);
    }

    if (isRestartModule) {
        activeUsersId.forEach((userId) => {
            bot.sendMessage(userId, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            // isRestartModule = false;
        });
    }

    socket.on("disconnect", (data) => {
        if (!isRestartModule) {
            isSendDisconnectMessage = true;
            disconnectTimeoutId = setTimeout(() => {
                activeUsersId.forEach((userId) => {
                    bot.sendSticker(userId, "CAACAgIAAxkBAAIGzGcpUvM89T8Qg5AwGhqWZ3Onaf9dAALzQQACb7NoSV-j4NDXxKN2NgQ").then(() => {
                        bot.sendMessage(userId, "–ü–æ—Ç–µ—Ä—è–Ω–∞ —Å–≤—è–∑—å —Å –º–æ–¥—É–ª–µ–º");
                    });
                });
                isSendDisconnectMessage = false;
            }, 30000);
        };
        isRestartModule = false;
    });
    socket.on('noData', () => {
        // console.log('NO DATA');
        currentSensorsData = null;
    });
    socket.on('sensorsStates', (data) => {
        function getStateName(entity, state) {
            switch (entity) {
                case "relay_one": // –°–≤–µ—Ç
                    return state ? "–≤–∫–ª—é—á–µ–Ω" : "–æ—Ç–∫–ª—é—á–µ–Ω";
                case "relay_two": // –í–æ—Ä–æ—Ç–∞
                    return state ? "–æ—Ç–∫—Ä—ã—Ç—ã" : "–∑–∞–∫—Ä—ã—Ç—ã";
                default:
                    return;
            }
        };
        activeUsersId.forEach((userId) => {
            bot.sendMessage(userId, `–°–≤–µ—Ç ${getStateName("relay_one", data.relay_one)}, –í–æ—Ä–æ—Ç–∞ ${getStateName("relay_two", data.relay_two)}`);
        });
    });
    socket.on('restartModule', (data) => {
        activeUsersId.forEach((userId) => {
            bot.sendMessage(userId, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è...");
        });
    });
    socket.on('startAPMode', (data) => {
        activeUsersId.forEach((userId) => {
            bot.sendMessage(userId, "–ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Ä–µ–∂–∏–º —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞. ");
        });
    });
    socket.on('openGate', () => {
        console.log("WARNING OPEN GATE!!!");
        if (!isSendWarningOpenGateMessage) {
            activeUsersId.forEach((userId) => {
                bot.sendMessage(userId, "–ù–µ –∑–∞–±—É–¥—å –∑–∞–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞!\n\n–ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑:", {
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{text: `5 –º–∏–Ω`, callback_data: "remindOpenGate5"}, {text: `15 –º–∏–Ω`, callback_data: "remindOpenGate15"}],
                            [{text: `30 –º–∏–Ω`, callback_data: "remindOpenGate30"}, {text: `60 –º–∏–Ω`, callback_data: "remindOpenGate60"}],
                            [{text: `–°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä`, callback_data: "clearOpenGateTimer"}]],
                    })
                });
            });
            isSendWarningOpenGateMessage = true;
            createOpenGateReminder(60000);
        }
    });
    socket.on('sensorsData', (data) => {
        // console.log('%cactiveUsersId: ', 'color: green;', activeUsersId);
        currentSensorsData = data;
        switch (true) {
            case data.temperature < 2:
                console.log("WARNING!");
                if (!isSendWarningTemperatureMessage) {
                    activeUsersId.forEach((userId) => {
                        bot.sendMessage(userId, `*–í–ù–ò–ú–ê–ù–ò–ï*‚ùóÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–ª–∏–∑–∫–∞ –∫ ${Math.floor(data.temperature)}C¬∞ üå°\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${Math.floor(data.humidity)}% üíß\n\n–ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑:`, {
                            parse_mode: "MarkdownV2",
                            reply_markup: JSON.stringify({
                                inline_keyboard: [[{text: `30 –º–∏–Ω`, callback_data: "remindTemperature30"}, {text: `60 –º–∏–Ω`, callback_data: "remindTemperature60"}], [{text: `–°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä`, callback_data: "clearTemperatureTimer"}]],
                            })
                        });
                    });
                    isSendWarningTemperatureMessage = true;
                    createTemperatureReminder(60000);
                }
                break;
            default:
                break;
        }
    });
});

function createTemperatureReminder(interval) {
    console.log('–ù–ê–ü–û–ú–ù–ò–¢–¨ –ü–†–û –¢–ï–ú–ü–ï–†–ê–¢–£–†–£ –ß–ï–†–ï–ó ', interval, "–ú–°");
    remindTemperatureSetTimeoutId = setTimeout(() => {
        isSendWarningTemperatureMessage = false;
    }, interval);
}
function createOpenGateReminder(interval) {
    console.log('–ù–ê–ü–û–ú–ù–ò–¢–¨ –ü–†–û –í–û–†–û–¢–ê –ß–ï–†–ï–ó ', interval, "–ú–°");
    remindOpenGateSetTimeoutId = setTimeout(() => {
        isSendWarningOpenGateMessage = false;
    }, interval);
}
function readActiveUsersIdFromDbFile() {
    const readFile = fs.readFileSync('db.txt', 'utf8');
    if (fs.readFileSync('db.txt', 'utf8') !== "") {
        return JSON.parse(readFile);
    } else {
        return [];
    }
}
function writeActiveUsersIdToDbFile(data) {
    const writeData = [...readActiveUsersIdFromDbFile(), data];
    fs.writeFile("db.txt", JSON.stringify(writeData), (error) =>{
        if(error) throw error;
    });
}
function rewriteActiveUsersIdToDbFile(data) {
    fs.writeFile("db.txt", JSON.stringify(data), (error) =>{
        if(error) throw error;
    });
}

httpServer.listen(3000);
activeUsersId = readActiveUsersIdFromDbFile();